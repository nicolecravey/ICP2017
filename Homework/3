1.

y = (1/(sqrt(2*pi)*1))*exp(-(1/2)*((2-0)^2/1^2))

y =

    0.0540
___________________


2.
Large egg from fridge:
t = ((67^(2/3)*3.7*1.038^(1/3))/(0.0054*pi^2*((4*pi)/3)^(2/3))*log(0.76*((4-100)/(70-100))))
t = 396.5763

Large egg from room temp:
t = ((67^(2/3)*3.7*1.038^(1/3))/(0.0054*pi^2*((4*pi)/3)^(2/3))*log(0.76*((20-100)/(70-100))))
t = 315.2179

__________________

3.
function PolarStruct = getPolar(CartStruct)
PolarStruct.r = sqrt(CartStruct.x^2 + CartStruct.y^2);
end
function CartStruct = getCart(PolarStruct)
CartStruct.r^2 =(PolarStruct.x^2 + PolarStruct.y^2);
end

_________________

4.

function fileSize = getDir()
directory = input ('Enter path to directory','s');
s = dir;
folderSize = size(s);
fileBytes = [s.bytes];
fileSize = sum(folderBytes);
end

 _______________

5.

function fib
in = input('Please enter a non-negative integer or type stop: ','s');
if(strcmp(in,'stop') == 1)
    retrn;
else
    num = str2double(in);
    if(num == round(num) && num >= 0)
        disp(getFib(num));
        fib;
    else
        disp('The input is a non-negative integer!');
        fib;
    end
    
end
function y = getFib(n_int)
if (n_int == 0)
    y = 0;

elseif (n_int == 1)
    y = 1;

else
    y = getFib(n_int-1) + getFib(n_int-2);
end
end
end


________________

6.
function area = getTriangleArea(vertices)
if isfield(vertices,'x1') && isfield(vertices, 'y1') && isfield(vertices, 'x2') && isfield(vertices, 'y2') && isfield(vertices, 'x3') && isfield(vertices, 'y3')
area = .5*abs((vertices.x2.*vertices.y3)-(vertices.x3.*vertices.y2)-(vertices.x1.*vertices.y3)+(vertices.x3.*vertices.y1)+(vertices.x1.*vertices.y2)-(vertices.x2.*vertices.y1));
else
    disp('Must have three points')
end
end
   

_______________

7.

function outLogical = isPrime(n)
if (n == 0)
    outLogical = 'false';
elseif (n == 2)
    outLogical = 'true';
else
    for x=2:n-1
        if (mod(n,x) == 0)
            outLogical = 'false';
end
end
end


_______________

8.
function [G] = genFunc(varagin)
switch nargin 
    case 0
        a = 0;
        b = 0;
        c = 0;
    case 1
        a = varagin(1);
        b = 0;
        c = 0;
    case 2
        a = varagin(1);
        b = varagin(2);
        c = 0;
    case 3
        a = varagin(1);
        b = varagin(2);
        c = varagin(3);
    otherwise
        error('Too many arguments')
end
function y = evalFunc(x)
    [y] = a*x^2 + b*x + c;
end
 G = @evalFunc;
end



